AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mtb-weather-app

  Sample SAM Template for mtb-weather-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20 

Resources:
  MtbWeatherAppFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: mtb-weather-app-api/
      Handler: app.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MtbWeatherAppLocations:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /locations
            Method: get
        MtbWeatherAppLocationForecastDetail:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /locations/forecast-detail/{location+}
            Method: get

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  MtbWeatherAppApi:
    Description: "API Gateway endpoint URL for Prod stage for Mtb Weather App function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod"
  MtbWeatherAppFunction:
    Description: "Mtb Weather App Lambda Function ARN"
    Value: !GetAtt MtbWeatherAppFunction.Arn
  MtbWeatherAppFunctionIamRole:
    Description: "Implicit IAM Role created for Mtb Weather App function"
    Value: !GetAtt MtbWeatherAppFunctionRole.Arn
